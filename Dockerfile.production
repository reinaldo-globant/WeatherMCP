# Multi-stage production Dockerfile for .NET 9.0
FROM mcr.microsoft.com/dotnet/aspnet:9.0-alpine AS base
WORKDIR /app
EXPOSE 8080

# Install curl for health checks
RUN apk add --no-cache curl

# Use SDK for building
FROM mcr.microsoft.com/dotnet/sdk:9.0-alpine AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src

# Copy csproj and restore dependencies
COPY ["WeatherMCP.csproj", "."]
RUN dotnet restore "./WeatherMCP.csproj" --use-current-runtime

# Copy source and build
COPY . .
RUN dotnet build "./WeatherMCP.csproj" -c $BUILD_CONFIGURATION -o /app/build --use-current-runtime --self-contained false --no-restore

# Publish the app
FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./WeatherMCP.csproj" -c $BUILD_CONFIGURATION -o /app/publish --use-current-runtime --self-contained false --no-restore

# Final stage/image
FROM base AS final
WORKDIR /app

# Copy published app
COPY --from=publish /app/publish .

# Copy health check script
COPY healthcheck.sh .
RUN chmod +x healthcheck.sh

# Create non-root user
RUN addgroup -g 1000 appuser && \
    adduser -u 1000 -G appuser -s /bin/sh -D appuser && \
    chown -R appuser:appuser /app

USER appuser

# Environment variables
ENV ASPNETCORE_ENVIRONMENT=Production \
    ASPNETCORE_URLS=http://+:8080 \
    DOTNET_EnableDiagnostics=0 \
    DOTNET_USE_POLLING_FILE_WATCHER=true

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD ./healthcheck.sh

ENTRYPOINT ["dotnet", "WeatherMCP.dll"]